#include<string>
#include <iostream>
#include<bits/stdc++.h>

using namespace std;


class Solution {
public:
    int firstUniqChar(string s) {
      int res = INT_MAX;
      pair <int, int> tracker[256]; //char: count, position
      for (int i = 0; i < s.length(); i++) {
        (tracker[s[i]].first)++;
        tracker[s[i]].second = i;
      }

      for (int i = 0; i < 256; i++) {
        if (tracker[i].first == 1) {
          res = min(tracker[i].second, res);
        }
      }
      if (res == INT_MAX)
        return -1;
      return res;
    }
};

int main() {
  Solution sol;
  string test = "";

  int ans = sol.firstUniqChar(test);
  cout << "answer: " << test[ans] << endl;
}
